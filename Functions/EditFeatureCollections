/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var points = /* color: #d63000 */ee.Geometry.MultiPoint(
        [[35.91536290503552, 31.034348341908856],
         [35.88182650947783, 30.5028397476398],
         [35.753612472594796, 30.533321006432647],
         [35.73320627649764, 30.524635439389375],
         [35.78358882146745, 30.41539451252275],
         [35.777820960241115, 30.3968452578188],
         [36.692754772704234, 31.802660644671835],
         [36.47393328340513, 31.277795959009698],
         [36.998709130550196, 31.468134012807102],
         [37.00227800297762, 31.54045195739561],
         [35.7607502753815, 30.551187534829523],
         [35.762075286634854, 30.550434520031345],
         [35.83741227977896, 30.603215739049634],
         [36.148204296586755, 31.14386516617094],
         [36.45829329326784, 31.723182464815697],
         [36.55635531870632, 31.800627675350423],
         [36.82985553598496, 31.917578854886095],
         [36.930090560797, 31.675718074781866],
         [36.844987076493226, 31.454365046868382],
         [35.91769277132232, 29.975873268933515],
         [36.00031098421118, 29.956435122305784],
         [36.00212836326875, 30.979306017902537],
         [35.83458731140479, 30.679238488651045],
         [36.139263798974525, 30.18188913427617],
         [35.89495854243114, 30.092970852411554],
         [35.88246084600121, 30.113564381253273],
         [36.66509613224798, 31.477772543434913],
         [36.39373119932907, 31.4990395486144],
         [36.522364124304886, 30.12374124817493],
         [36.03950509782544, 31.243307391668424],
         [36.1218437484539, 31.230502458777934],
         [36.19320517203005, 31.284063587345603],
         [36.11758559246846, 31.10806568251274],
         [35.87317806144085, 30.338352022008593],
         [35.9893471118894, 30.3550231097995],
         [35.336056182952916, 30.493202555832998],
         [35.99927416826608, 30.090512023200137]]),
    newPoints = /* color: #98ff00 */ee.Geometry.MultiPoint(
        [[37.9655287960511, 32.84127991062129],
         [38.016286942417764, 32.735126080262965],
         [38.02683515446347, 32.728691945897964],
         [38.16220859540135, 32.658243905016256],
         [38.34243003351378, 32.50716950291405],
         [37.87854429915296, 32.80295902800765],
         [37.96709923110643, 32.853768410653764],
         [38.050377712678596, 32.97591543433628],
         [38.00077486702503, 32.92247798007975],
         [37.90107915153635, 32.86851181500862],
         [37.91331002464426, 32.86793508703882],
         [37.88803288688791, 32.85690444279564],
         [36.845126688444, 32.27781932778688],
         [37.034735860059754, 32.28694765164555]]),
    polygons = /* color: #0b4a8b */ee.Geometry.Polygon(
        [[[35.914982068026234, 31.035267147129577],
          [35.914668248647104, 31.03469717704601],
          [35.914708482706715, 31.033980117809875],
          [35.91602812954204, 31.033782465337843],
          [35.916178333246876, 31.035152234504682]]]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Introduction ////////////////////////////////////////////////////////////////////////////////////////

  // This code enables users to edit or add features to the WHS featureCollection and edit or add 
  // propreties to individual features. 
  //
  // GEE currently does not allow users to interactively or directly change the geometries of features
  // in a featureCollection currently. Whereas, GEE does let users interactively edit the geometries of 
  // Imports, but those were drawn on the map instead of data uploaded as an asset. That means once an 
  // asset is uploaded to GEE servers, its geometries or attributes can not be editted or added to
  // easily. 
  //
  // Programs, like ArcGIS and QGIS, allow users to edit shapefiles and their attributes (what GEE
  // reads as featureCollections). Editting and adding many features is much easier in ArcGIS and QGIS,
  // so it is preferrable to make many edits outside GEE and then upload the shapefile as an asset. If
  // there are only a few changes, then this code is good for saving the hassle of waiting for assets to
  // finish uploading. However, this code enables users to leverage other advantages of GEE, like 
  // identifying and updating the location of WHS that has been washed out by flickering through many 
  // scenes with an animation. 
  //
  // The features that are drawn in GEE show up in the Imports console above are edittable by clicking, 
  // dragging, and dropping. This code utilizes those benefits, and copies their geometries and/or 
  // properties into the WHS featureCollection through a series of filters, recasting data in the 
  // required formats, merges, and sorts to work around the limits GEE.

// Function Overview ///////////////////////////////////////////////////////////////////////////////////

  // I wrote seven functions allow featureCollections to be editted:
  //  - updateGeoFromPoint
  //  - updateGeoFromMulti
  //  - addGeoFromPoint
  //  - addGeoFromMulti
  //  - addNote
  //  - propOverwrite
  //  - propAppend
  //  - addPolyfromSingle
  //  - addPolyfromGC
  //
  // I envision these functions being for one-off or quick changes in GEE, but not to seriously modify 
  // existing data or create new datasets. Both of those will be much easer in ArcGIS or QGIS.

// Reach goals /////////////////////////////////////////////////////////////////////////////////////////

  // - add default values to functions

// Visualization help & to test code ///////////////////////////////////////////////////////////////////

// Load the WHS dataset that will be editted - this is the latest copy
  // var WHS_July9 = ee.FeatureCollection("users/cjorner/Jordan/WHS_MoA_withPCS"); 
  // // print('Inspect WHSs: ', WHS_July9);
  
  // var num = 3; 
  // var WHS = WHS_July9.filter(ee.Filter.and(
  //                     ee.Filter.eq('Feature','WHS'),
  //                     ee.Filter.eq('Number', num))); 
  
  // print('WHS ', num, WHS.first().get('Name'),  WHS.first().toDictionary());
  
// Landsat 8 - Tier 1 & Real Time Scenes 
// simpleComposite does not accept TOA or SR scenes, so I am using the raw scenes
// A work around would be compsiting after filtering by cloud cover first
  // var l8TOA = ee.ImageCollection("LANDSAT/LC08/C01/T1_RT_TOA") 
  //     // filter to a period of time; the earliest landsat8 imagery is from '2013-04-11'
  //       .filterDate('2017-11-01','2018-04-01')
  //     // filter to one WHS
  //       .filterBounds(WHS.geometry());
        
  // // WHS 
  //   Map.centerObject(WHS, 15);
  //   Map.addLayer(WHS_July9, {color: 'FF0000'}, "haffirs");
  //   Map.addLayer(WHS.geometry(), {color: 'FFFF00'}, 'selected WHS');
    
  // var Video = require('users/lukemacaulay/Jordan:Functions/CreateVideos');
  // Video.Landsat.TOA(l8TOA, 20, WHS, 1000);
  

// Functions /////////////////////////////////////////////////////////////////////////////////////////

// Functions to update the geometry of a feature  / / / / / / / / / / / / / / / / / / / / / / / / / / 

// It works, but it's not permanent, so the editted featureCollection must be exported as an asset 
// to preserve the changes.

// The function's name is updateFromPoint, and it has five parameters.
  //  1) haffirFC     = the featureCollection that you want to edit
  //  2) haffirName   = the name of the haffir that will be assigned a new location
  //  3) newPoint     = the new location of the haffir as an ee.Geometry.Point()
  //  4) newNotes     = notes to add about moving point

// Define the function's name and arguments - this is for an import that's an ee.Geometry.Point()
exports.updateFromPoint = function(haffirFC, haffirName, newPoint, newNotes){
  
  // Define a new feature using the newPoint location and the original properties from the haffir.
  // Then cast it as a featureCollection - this is important for the next step
    var replacement = ee.FeatureCollection([
      
      // Define a new feature with the new location and original properties.
        ee.Feature(
          
          // Get new location out of imports:
            ee.Geometry.Point(newPoint.coordinates()),
            
          // Get original properties:
            // Filter the featureCollection down to the haffir of interest.
              haffirFC.filter(ee.Filter.eq('Name', haffirName))
              
            // .first() to pop the haffir out of its featureCollection wrapping 
            // and make the haffir's properties accessible.
              .first()
              
            // Returns all of the haffirs properties as a set of keys and values 
            // that then gets added to the new point.
              .toDictionary()
            )
            
            // Add new notes to properties
              .setMulti({'NotesGEE': newNotes,
                         'UpdatedLat': newPoint.coordinates().get(0),
                         'UpdatedLong': newPoint.coordinates().get(1)
                    })
      ]);
                      
  // Filter the old featureCollection to exclude the haffir and merge the haffir with its new 
  // location - the merge() function only merges data of the same type, hence we had to cast a
  // single feature as a featureCollection in the last step.
    haffirFC = haffirFC.filter(ee.Filter.neq('Name', haffirName)).merge(replacement)
                // Sort the featureCollection to return it in the same order
                  .sort('Number').sort('Feature', false);
    
    return haffirFC;
};

// The function's name is updateFromMulti, and it has five parameters.
  //  1) haffirFC     = the featureCollection that you want to edit
  //  2) haffirName   = the name of the haffir that will be assigned a new location
  //  3) multiPoints  = the multipoint geometry from imports that has haffir's new location
  //  4) pointIndex   = the point's index in the multipoint import geomertry
  //  5) newNotes     = notes to add about moving point

// Define the function's name and arguments - this is for an import that's an ee.Geometry.MultiPoint()
exports.updateFromMulti = function(haffirFC, haffirName, multiPoints, pointIndex, newNotes){
  
  // Define a new feature using the newPoint location and the original properties from the haffir.
  // Then cast it as a featureCollection - this is important for the next step
    var replacement = ee.FeatureCollection([
      
      // Define a new feature with the new location and original properties.
        ee.Feature(
          
          // Get new location out of imports:
            ee.Geometry.Point(multiPoints.coordinates().get(pointIndex)),
            
          // Get original properties:
            // Filter the featureCollection down to the haffir of interest.
              haffirFC.filter(ee.Filter.eq('Name', haffirName))
              
            // .first() to pop the haffir out of its featureCollection wrapping 
            // and make the haffir's properties accessible.
              .first()
              
            // Returns all of the haffirs properties as a set of keys and values 
            // that then gets added to the new point.
              .toDictionary()
            )
            
            // Add new notes to properties
              .setMulti({'NotesGEE': newNotes,
                         'UpdatedLat': ee.Geometry.Point(multiPoints.coordinates().get(pointIndex))
                                        .coordinates().get(0),
                         'UpdatedLong': ee.Geometry.Point(multiPoints.coordinates().get(pointIndex))
                                        .coordinates().get(1)
              })
      ]);
                      
  // Filter the old featureCollection to exclude the haffir and merge the haffir with its new 
  // location - the merge() function only merges data of the same type, hence we had to cast a
  // single feature as a featureCollection in the last step.
    haffirFC = haffirFC.filter(ee.Filter.neq('Name', haffirName)).merge(replacement)
                // Sort the featureCollection to return it in the same order
                  .sort('Number').sort('Feature', false);
    
    return haffirFC;
};

// Function to add features / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /

// It works, but it's not permanent, so the new featureCollection with the added feature must be 
// exported as an asset to preserve the changes.

// The function's name is addFeature, and it has 7 parameters:
  //  1) haffirFC       = the featureCollection that to add a WHS to.
  //  2) newHaffirName  = the name of the new haffir
  //  3) newPoint       = the new location of the haffir
  //  4) nearbyCity     = the closet city or cities to the new haffir
  //  5) WHSorDam       = if the new feature as WHS or a dam
  //  6) notes          = any notes about the haffir to include
  //  7) year           = the year the haffir was built

// Define the function's name and arguments 
exports.addGeoFromPoint = function(haffirFC, newHaffirName, newPoint,
                                nearbyCity, WHSorDam, newNotes, year){
  
  // Define a new feature using the newPoint location and property arguments listed in the function
  // Then cast it as a featureCollection - this is important for the next step
    var newHaffir = ee.FeatureCollection([
      // New feature with the new location and new properties provided in the argument.
        ee.Feature(
          
          // Get location of the new point out of imports:
          ee.Geometry.Point(newPoint.coordinates()),
          
          // Create a dictionary to hold properties
          {
            // Nearby city - if unknown, enter unknown
            City: nearbyCity,
            
            // Is the feature a WHS or a Dam - if uncertain, but unsure
            Feature: WHSorDam,
            
            // Get the Latitude and Longitude coordinates
            Lat: newPoint.coordinates().get(0),
            Long: newPoint.coordinates().get(1),
            
            // Name the feature
            Name: newHaffirName,
            
            // There's no notes from before loading to GEE, so this is null
            Notes: null,
            
            // Add notes
            NotesGEE: notes,
            
            // Get the highest number, and then add 1
            Number: haffirFC.filter(ee.Filter.eq('Feature', WHSorDam)).size().add(1),
            
            // Year the feature was built - if unknown, enter null
            Year: year
          }
        )  
    ]);
                      
  // Filter the old featureCollection to exclude the haffir and merge the haffir with its new 
  // location - the merge() function only merges data of the same type, hence we had to cast a
  // single feature as a featureCollection in the last step.
    haffirFC = haffirFC.merge(newHaffir).sort('Number').sort('Feature', false);
      
    return haffirFC;
};

// The function's name is addFeature, and it has 8 parameters:
  //  1) haffirFC       = the featureCollection that to add a WHS to.
  //  2) newHaffirName  = the name of the new haffir
  //  3) newPoint       = the new location of the haffir
  //  4) pointIndex     = the point's index in a multipoint import geomertry. If 1 point, then 0
  //  5) nearbyCity     = the closet city or cities to the new haffir
  //  6) WHSorDam       = if the new feature as WHS or a dam
  //  7) notes          = any notes about the haffir to include
  //  8) year           = the year the haffir was built

// Define the function's name and arguments 
exports.addGeoFromMulti = function(haffirFC, newHaffirName, multiPoints, pointIndex, 
                                nearbyCity, WHSorDam, newNotes, year){
  
  // Define a new feature using the newPoint location and property arguments listed in the function
  // Then cast it as a featureCollection - this is important for the next step
    var newHaffir = ee.FeatureCollection([
      // New feature with the new location and new properties provided in the argument.
        ee.Feature(
          
          // Get location of the new point out of imports:
          ee.Geometry.Point(multiPoints.coordinates().get(pointIndex)),
          
          // Create a dictionary to hold properties
          {
            // Nearby city - if unknown, enter unknown
            City: nearbyCity,
            
            // Is the feature a WHS or a Dam - if uncertain, but unsure
            Feature: WHSorDam,
            
            // Get the Latitude and Longitude coordinates - can't pull out each yet
            Lat: ee.Geometry.Point(multiPoints.coordinates().get(pointIndex)).coordinates().get(0),
            Long: ee.Geometry.Point(multiPoints.coordinates().get(pointIndex)).coordinates().get(1),
            
            // Name the feature
            Name: newHaffirName,
            
            // There's no notes from before loading to GEE, so this is null
            Notes: null,
            
            // Add notes
            NotesGEE: notes,
            
            // Get the highest number, and then add 1
            Number: haffirFC.filter(ee.Filter.eq('Feature', WHSorDam)).size().add(1),
            
            // Year the feature was built - if unknown, enter null
            Year: year
          }
        )  
    ]);
                      
  // Filter the old featureCollection to exclude the haffir and merge the haffir with its new 
  // location - the merge() function only merges data of the same type, hence we had to cast a
  // single feature as a featureCollection in the last step.
    haffirFC = haffirFC.merge(newHaffir).sort('Number').sort('Feature', false);
      
    return haffirFC;
};

// Function to add a note or update a property's value to a single feature / / / / / / / / / / / / / 

// It works, but it's not permanent, so the new featureCollection with the added feature must be 
// exported as an asset to preserve the changes.

// The function's name is addNotes, and it has 3 arguments:
  // 1) haffirFC    = the featureCollection that to add a WHS to.
  // 2) haffirName  = the name of the haffir to add a new note to.
  // 3) newNotes    = notes to add about the feature
  
// Define the function's name and arguments 
  exports.addNote = function(haffirFC, haffirName, newNotes){
    
  // Get the feature of interest, add the note, and then cast it as a featureCollection - this is 
  // important for the next step
    var noteAdded = ee.FeatureCollection([
      
      // Filter the featureCollection down to the haffir of interest.
        haffirFC.filter(ee.Filter.eq('Name', haffirName))
        
      // .first() to pop the haffir out of its featureCollection wrapping 
      // and make the haffir's properties accessible.
        .first()
      
      // Add new notes to properties 
        .set('NotesGEE', newNotes)
    ]);
    
    // Filter the old featureCollection to exclude the haffir and merge the haffir with its new 
    // notes - the merge() function only merges data of the same type, hence we had to cast a
    // single feature as a featureCollection in the last step. 
      haffirFC = haffirFC.filter(ee.Filter.neq('Name', haffirName)).merge(noteAdded)
                  // Sort the featureCollection to return it in the same order
                    .sort('Number').sort('Feature', false);

    return haffirFC;
  };
  
// The function's name is propOverwrite, and it has 4 arguments:
  // 1) haffirFC        = the featureCollection that to add a WHS to.
  // 2) haffirName      = the name of the haffir to add a new note to.
  // 3) propToOverwrite = the name of the property whose value will be overwritten 
  // 4) newValue        = the new value that will replace the old one
  
// Define the function's name and arguments 
  exports.propOverwrite = function(haffirFC, haffirName, propToOverwrite, newValue){
    
  // Get the feature of interest, add the note, and then cast it as a featureCollection - this is 
  // important for the next step
    var overwrote = ee.FeatureCollection([
      
      // Filter the featureCollection down to the haffir of interest.
        haffirFC.filter(ee.Filter.eq('Name', haffirName))
        
      // .first() to pop the haffir out of its featureCollection wrapping 
      // and make the haffir's properties accessible.
        .first()
      
      // Add new notes to properties 
        .set(propToOverwrite, newValue)
    ]);
    
    // Filter the old featureCollection to exclude the haffir and merge the haffir with its new 
    // notes - the merge() function only merges data of the same type, hence we had to cast a
    // single feature as a featureCollection in the last step. 
      haffirFC = haffirFC.filter(ee.Filter.neq('Name', haffirName)).merge(overwrote)
                  // Sort the featureCollection to return it in the same order
                    .sort('Number').sort('Feature', false);

    return haffirFC;
  };

// The function's name is propAppend, and it has 4 arguments:
  // 1) haffirFC        = the featureCollection that to add a WHS to.
  // 2) haffirName      = the name of the haffir to add a new note to.
  // 3) propToOverwrite = the name of the property whose value will be overwritten 
  // 4) newValue        = the new value that will replace the old one
  
// Define the function's name and arguments 
  exports.propAppend = function(haffirFC, haffirName, propToAppend, valueToAdd){
    
  // Filter the featureCollection down to the feature of interest and store the old value as a 
  // variable.
    var appending = haffirFC.filter(ee.Filter.eq('Name', haffirName))
          
      // .first() to pop the haffir out of its featureCollection wrapping 
      // and make the haffir's properties accessible.
        .first()
        
      // Add new notes to properties 
        .get(propToAppend)
        
      // Force GEE server to unwrap the property's value and give it as a string to the client side.
        .getInfo();
  
  // Append the value - GEE will automatically recast this is a string with the set() function  
    var appended = appending + ' ' + valueToAdd;
    
  // Get the feature of interest, add the note, and then cast it as a featureCollection - this is 
  // important for the next step
    var appendedProp = ee.FeatureCollection([
      
      // Filter the featureCollection down to the haffir of interest.
        haffirFC.filter(ee.Filter.eq('Name', haffirName))
        
      // .first() to pop the haffir out of its featureCollection wrapping 
      // and make the haffir's properties accessible.
        .first()
      
      // Add new notes to properties 
        .set(propToAppend, appended)
    ]);
    
    // Filter the old featureCollection to exclude the haffir and merge the haffir with its new 
    // notes - the merge() function only merges data of the same type, hence we had to cast a
    // single feature as a featureCollection in the last step. 
      haffirFC = haffirFC.filter(ee.Filter.neq('Name', haffirName)).merge(appendedProp)
                  // Sort the featureCollection to return it in the same order
                    .sort('Number').sort('Feature', false);

    return haffirFC;
  };
  
// Function to add a polygon as a property a feature / / / / / / / / / / / / / / / / / / / / / / / / / 

// It works, but it's not permanent, so the new featureCollection with the added feature must be 
// exported as an asset to preserve the changes.

// The function's name is addPolyFromSingle, and it has four arguments:
  // 1) haffirFC    = the featureCollection that to add a WHS to.
  // 2) haffirName  = the name of the haffir to add a new note to.
  // 3) newPolygon  = polygon outlining the features' boundaries
  // 4) newNotes    = notes about the polygon to add
  
// Define the function's name and arguments
  var addPolyFromSingle = function(haffirFC, haffirName, newPolygon, newNotes){
    
    // Get the feature of interest, add the note, and then cast it as a featureCollection - this is 
    // important for the next step
    var polyAdded = ee.FeatureCollection([
      
      // Filter the featureCollection down to the haffir of interest.
        haffirFC.filter(ee.Filter.eq('Name', haffirName))
        
      // .first() to pop the haffir out of its featureCollection wrapping 
      // and make the haffir's properties accessible.
        .first()
      
      // Add new notes to properties 
        .setMulti({'Polygon': newPolygon,
                   'NotesPoly': newNotes
        })
    ]);
    
    // Filter the old featureCollection to exclude the haffir and merge the haffir with its new 
    // notes - the merge() function only merges data of the same type, hence we had to cast a
    // single feature as a featureCollection in the last step. 
      haffirFC = haffirFC.filter(ee.Filter.neq('Name', haffirName)).merge(polyAdded)
                  // Sort the featureCollection to return it in the same order
                    .sort('Number').sort('Feature', false);

    return haffirFC;
  };
  
// The function's name is addPolyFromSingle, and it has four arguments:
  // 1) haffirFC    = the featureCollection that to add a WHS to.
  // 2) haffirName  = the name of the haffir to add a new note to.
  // 3) newGC       = the GeometryCollection from imports that has haffir's outline
  // 4) GCIndex     = the polygon's index in the GeometryCollection
  // 4) newNotes    = notes about the polygon to add
  
// Define the function's name and arguments
  var addPolyFromGC = function(haffirFC, haffirName, newGC, GCIndex, newNotes){
    
    // Get the feature of interest, add the note, and then cast it as a featureCollection - this is 
    // important for the next step
    var polyAdded = ee.FeatureCollection([
      
      // Filter the featureCollection down to the haffir of interest.
        haffirFC.filter(ee.Filter.eq('Name', haffirName))
        
      // .first() to pop the haffir out of its featureCollection wrapping 
      // and make the haffir's properties accessible.
        .first()
      
      // Add new notes to properties 
        .setMulti({'Polygon': newGC.geometries().get(GCIndex),
                   'NotesPoly': newNotes
        })
    ]);
    
    // Filter the old featureCollection to exclude the haffir and merge the haffir with its new 
    // notes - the merge() function only merges data of the same type, hence we had to cast a
    // single feature as a featureCollection in the last step. 
      haffirFC = haffirFC.filter(ee.Filter.neq('Name', haffirName)).merge(polyAdded)
                  // Sort the featureCollection to return it in the same order
                    .sort('Number').sort('Feature', false);

    return haffirFC;
  };